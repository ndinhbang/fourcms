<?php

namespace Abi\Article\Entries;

use Abi\Article\Models\Article;
use Abi\Article\Repositories\ArticleEntryRepository;
use App\Entries\Base\EloquentEntry;
use Illuminate\Database\Eloquent\Model;
use Statamic\Statamic;

class ArticleEntry extends EloquentEntry
{
    public static function fromModel(Model $model)
    {
        return parent::fromModel($model); // TODO: Change the autogenerated stub
    }

    /**
     * @return Model
     */
    public function toModel(): Model
    {
        $data = $this->data();

        if ($this->blueprint && $this->collection()->entryBlueprints()->count() > 1) {
            $data['blueprint'] = $this->blueprint;
        }

        return Article::findOrNew($this->id())->fill([
            'id'         => $this->id(),
            'origin_id'  => $this->origin()?->id(),
            'site'       => $this->locale(),
            'slug'       => $this->slug(),
            'uri'        => $this->uri(),
            'date'       => $this->hasDate() ? $this->date() : null,
            'collection' => $this->collectionHandle(),
            'data'       => $data->except(ArticleEntryQueryBuilder::COLUMNS),
            'published'  => $this->published(),
            'status'     => $this->status(),
            'updated_at' => $this->lastModified(),
        ]);
    }

    public function repository()
    {
        return app(ArticleEntryRepository::class);
    }

    public function editUrl()
    {
        return $this->cpUrl('article.edit');
    }

    public function updateUrl()
    {
        return $this->cpUrl('article.update');
    }

    public function publishUrl()
    {
        return $this->cpUrl('article.published.store');
    }

    public function unpublishUrl()
    {
        return $this->cpUrl('article.published.destroy');
    }

    public function revisionsUrl()
    {
        return $this->cpUrl('article.revisions.index');
    }

    public function createRevisionUrl()
    {
        return $this->cpUrl('article.revisions.store');
    }

    public function restoreRevisionUrl()
    {
        return $this->cpUrl('article.restore-revision');
    }

    public function apiUrl()
    {
        if (! $id = $this->id()) {
            return null;
        }

        return Statamic::apiRoute('article.show', [$id]);
    }

    protected function cpUrl($route)
    {
        if (! $id = $this->id()) {
            return null;
        }

        return cp_route($route, [$id]);
    }

}
